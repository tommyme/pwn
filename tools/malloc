#!/usr/local/bin/python3
import requests as r
from lxml import etree
from collections import OrderedDict as od
from pwn import *
from time import time
import argparse
context.log_level = 'debug'

parser = argparse.ArgumentParser(
    description="make your clone EASY!",
    usage="clone [-*] [repo] [dest]"
)
parser.add_argument('-v','--ver', type=str, help="glibc version")
parser.add_argument('-m','--malloc', action="store_true", help="get malloc.c only")
parser.add_argument('-a','--all',    action="store_true", help="get the whole glibc package")
args = parser.parse_args()

def download(url, dst):
   if not os.path.exists(dst[:dst.rfind("/")]):
      os.makedirs(dst[:dst.rfind("/")])
   with open(dst,"wb") as f:
      f.write(r.get(url).content)

def malloc_source():
   target_url = "https://sourceware.org/git/?p=glibc.git;a=tags"
   debug("request start..."); st=time()
   resp = r.get(target_url).content; ed=time()
   debug("request ended. consume time=%.2f" % (ed-st))
   html = etree.HTML(resp)
   debug("etree build ended. time=%.2f" % (time()-ed))

   all_ele = html.xpath(f"/html/body/table/tr")
   total = len(all_ele)

   # build info dict {"malloc.c":..., "home":...}
   data = od({})
   for i in range(1,total):
      ele = html.xpath(f"/html/body/table/tr[{i}]/td[2]/a")[0]
      if len(ele.text) == len("glibc-2.23"):
         urls = {
            "home" :"https://sourceware.org"+ele.attrib['href'],
            "malloc.c" : f"https://sourceware.org/git/?p=glibc.git;a=blob_plain;f=malloc/malloc.c;hb={ele.attrib['href'].split('h=')[1]}"
         }
         data[ele.text] = urls
      if ele.text == "glibc-2.23":
         break
   info(f"versions latest: {list(data.keys())[0]}")
   
   # download
   ver = args.ver
   if f"glibc-{ver}" in list(data.keys()):
      urls = data[f"glibc-{ver}"]
      download(urls["malloc.c"], f"malloc-{ver}.c")
      success(f"downloaded malloc-{ver}.c")
      info(f"you can goto glibc-{ver}'s home for more info!")
      info(f"üè†home: {urls['home']}")
   else:
      error("version is invalid!")

def glibc():
   url = f"http://ftp.gnu.org/gnu/glibc/glibc-{args.ver}.tar.gz"
   try:
      info(f"downloading glibc-{args.ver}.tar.gz...")
      dst = f"{os.environ['HOME']}/.glibc/glibc-{args.ver}.tar.gz"
      download(url, dst)
      info("unziping...")
      os.system(f"tar xf ~/.glibc/glibc-{args.ver}.tar.gz  -C ~/.glibc")
      os.remove(dst)
      info("over.")
   except:
      error("version error or network err")

if args.ver:
   if args.malloc:
      malloc_source()
   if args.all:
      glibc()